기본 python 프로그램은 아래와 같다.

import time 
def count(limit):
    result = 0
    for a in range(1, limit + 1):
        for b in range(a + 1, limit + 1):
            for c in range(b + 1, limit + 1):
                if c * c > a * a + b * b:
                    break
 
                if c * c == (a * a + b * b):
                    result += 1
    return result
 
if __name__ == '__main__':
    start = time.time()
    result = count(1000)
    duration = time.time() - start
    print(result, duration)

----------------------------------------------------------------------

계산 속도 향상을 보려고 하는 핵심 함수를 아래의 이름으로 저장한다.
pythagorean_triples.pyx

import time
import pyximport; pyximport.install()
import pythagorean_triples
 
def main():
    start = time.time()
    result = pythagorean_triples.count(1000)
    duration = time.time() - start
    print(result, duration)
 
if __name__ == '__main__':
    main()


----------------------------------------------------------------------
setup.py 파일 작성

from distutils.core import setup
from Cython.Build import cythonize
 
setup(
    ext_modules = cythonize("pythagorean_triples.pyx")
)

$ python setup.py build_ext --inplace
Compiling pythagorean_triples.pyx because it changed.
[1/1] Cythonizing pythagorean_triples.pyx
running build_ext
building 'pythagorean_triples' extension
creating build
creating build/temp.macosx-10.7-x86_64-3.6
gcc -Wno-unused-result -Wsign-compare -Wunreachable-code
-DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes
-I/Users/gigi.sayfan/miniconda3/envs/py3/include
-arch x86_64 -I/Users/gigi.sayfan/miniconda3/envs/py3/include
-arch x86_64
-I/Users/gigi.sayfan/miniconda3/envs/py3/include/python3.6m
-c pythagorean_triples.c
-o build/temp.macosx-10.7-x86_64-3.6/pythagorean_triples.o
gcc -bundle -undefined dynamic_lookup
-L/Users/gigi.sayfan/miniconda3/envs/py3/lib
-L/Users/gigi.sayfan/miniconda3/envs/py3/lib
-arch x86_64
build/temp.macosx-10.7-x86_64-3.6/pythagorean_triples.o
-L/Users/gigi.sayfan/miniconda3/envs/py3/lib
-o pythagorean_triples.cpython-36m-darwin.so


import time
import pythagorean_triples
 
def main():
    start = time.time()
    result = pythagorean_triples.count(1000)
    duration = time.time() - start
    print(result, duration)
 
if __name__ == '__main__':
    main()



----------------------------------------------------------------------

#       pythagorean_triples.pyx
def count(limit):
    cdef int result = 0
    cdef int a = 0
    cdef int b = 0
    cdef int c = 0
 
    for a in range(1, limit + 1):
        for b in range(a + 1, limit + 1):
            for c in range(b + 1, limit + 1):
                if c * c > a * a + b * b:
                    break
 
                if c * c == (a * a + b * b):
                    result += 1
    return result
 
#        main.py
import time
import pyximport; pyximport.install()
import pythagorean_triples
 
def main():
    start = time.time()
    result = pythagorean_triples.count(1000)
    duration = time.time() - start
    print(result, duration)
 
if __name__ == '__main__':
    main()  
   
./pytha.py
(881, 10.488554000854492)
[ihlee@master chun20180524]$ ./pytha1.py
(881, 0.06052517890930176)
[ihlee@master chun20180524]$ ./pytha2.py
(881, 7.23646092414856)

실행 시간 측정 방법:
>>> import timeit
>>> timeit.timeit('count(1000)', setup='from pythagorean_triples import count', number=1)
0.05357028398429975
 
# Running 10 times
>>> timeit.timeit('count(1000)', setup='from pythagorean_triples import count', number=10)
0.5446877249924

------------------------------------------------------------------------------------   

파이썬에서 C 프로그램 부르기:
http://incredible.egloos.com/7410970

파이썬에서 Fortran 프로그램 부르기:
http://incredible.egloos.com/7410969

Pypy: 파이썬 코드를 수정하지 않고 실행속도 향상시키는 방법:
http://incredible.egloos.com/7414058